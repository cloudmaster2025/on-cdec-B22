                                   Terraform 

IAC - Infrastucture as a Code  - open-source, free-to-use, work over 	multiple cloud

Instance
bucket
vpc     ---- via console create 

1) if by scripting
i)  project1 - ec2 , s3 , rds, route53, vpc  >>> 40 - 50 days    
               >>>.tf  file -  60-80 days
ii) project2 - ec2 , s3 , dynamodb, route53 , vpc, lambda >>> 5 days
iii) project3 - ec2 , s3 , dynamodb, route53 , vpc, lambda >>> 6 days

2)
i) destroying the resources

3) Monitoring
i) Documentation  


manual errors -> absolute truth


repetitive tasks to be automate, fast 

console ---->into ---> code(scripting)   

>>>shell scripting - hard to use 
                   - rigid 



IAC  - i) less time more  work
       ii) repetitive 
       ii) easy to monitor
       iii) proper documentation
       

iac --> cloudFormation >>> aws



>> Install the terraform on your machine
>>> write the files  i)  .tf {terraform language}
                     ii) .tf.json {json}

>> write all the details of infra in the files and  execute
>>> terraform lifecycle  -> i) # terraform init ---> initialize, install libraries of terraform
                            ii) # terraform plan   
                            iii) # terraform apply --auto-approve
                            iv) Destroy 

>> Blocks :- this blocks define what is our purpose
    1) provider Block  -- service provider
    2) resource Block  -- to create any  resource
    3) data block -- existing resource ko refer
    4) variable block -- variable
    5) output block -- for outputs
    6) module block  -- to refer existing script for future

>> Files >> written key and value format 
         >> "arguments" to give instruction


format of block ---

block_type resource_type block_name{
   configuration
} 
      

vim file.tf 

provider "aws" {
  region = "us-west-1"
} 

resource "aws_instance" "my_instance" {
 ami = "ami-06fe18c7144382cfb"
 instance_type = var.i_type           'reffered variable block here from below'
 security_groups = ["default"]
 key_name = "new-1" 
}


Arguments - given key (image_id)
Attribute -  what we get  (public_ip)


data_types ---

i) string = "" = "t2.micro" , "1234hello"
ii) numbers =  1234
iii) list = ["apple", "banana", "pineapple"]
iv) set =  {"apple", "apple", "banana", "apple",  "papaya"}
v) map = (fruit="apple",fruits="bananas" bus="volvo")


***security group rules
egress {
    from_port        = 0    {all ports/trffic}
    to_port          = 0
    protocol         = "-1"  {all protocols}
    cidr_blocks      = ["0.0.0.0/0"]
 }


***heredoc- to write script in user data of instance
   user_data = <<-EOF
   #!/bin/bash
   yum update
   yum install nginx -y
   systemctl start nginx
   systemctl enable nginx
   echo "hello $HOSTNAME" > /usr/share/nginx/html/index.html
   EOF

***file function for user data
   user_data = filebase64("./script.sh")


TASK -> LOAD Balancer terraform fie



*****variable  -  to prevent from being rigid(hardcode) in value giving for argument
   block_type "block_name" {}

   variable "i_type" {}
   variable  "image_id" {
   default = "ami-04f7a54071e74f48"
}

# terraform plan --var image_id=ami-0e40cbc388241f8ce


*****data block - block is use to reffering the existing resources like custom_vpc, custom_sg etc.
   data "aws_vpc" "my-vpc" {
     id= "existing_vpc"
    }



ASG

i) template
ii) vpc
iii) group size (desrired, min, max)
iv) auto-scaling-policy
v)sns
vi)tag
vii) review




